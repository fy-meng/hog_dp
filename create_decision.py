from dice import six_sided, four_sided
from hog import take_turn, reroll, hogtimus_prime as hp, free_bacon as fb

# p[swapped][reroll][num_roll][target_score]
p = [[[] for r in range(1 + 1)]
     for s in range(1 + 1)]
p[0][0] = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		   [0, 0.16666666666666666, 0, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		   [0, 0.2777777777777778, 0, 0.027777777777777776, 0.027777777777777776, 0.0, 0.08333333333333333, 0.05555555555555555, 0.1388888888888889, 0.1111111111111111, 0.08333333333333333, 0.1111111111111111, 0.027777777777777776, 0.05555555555555555, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0],
		   [0, 0.3472222222222222, 0, 0.06944444444444445, 0.0, 0.004629629629629629, 0.004629629629629629, 0.0, 0.027777777777777776, 0.046296296296296294, 0.06944444444444445, 0.013888888888888888, 0.08796296296296297, 0.08333333333333333, 0.06944444444444445, 0.046296296296296294, 0.027777777777777776, 0.08333333333333333, 0.004629629629629629, 0.013888888888888888, 0.0, 0.0, 0.0, 0, 0, 0],
		   [0, 0.38580246913580246, 0, 0.11574074074074074, 0.0007716049382716049, 0.015432098765432098, 0.0, 0.0, 0.0007716049382716049, 0.0030864197530864196, 0.007716049382716049, 0.0, 0.02700617283950617, 0.015432098765432098, 0.05246913580246913, 0.061728395061728385, 0.06558641975308642, 0.040123456790123455, 0.05246913580246913, 0.061728395061728385, 0.02700617283950617, 0.06712962962962964, 0, 0, 0, 0],
		   [0, 0.4018775720164609, 0, 0.16075102880658437, 0.003215020576131687, 0.03215020576131687, 0.0, 0.00012860082304526747, 0.0, 0.0, 0.00012860082304526747, 0.0, 0.001929012345679012, 0.0006430041152263373, 0.009002057613168721, 0.015560699588477361, 0.02379115226337448, 0.004501028806584362, 0.04115226337448559, 0.0327932098765432, 0.27237654320987653, 0, 0, 0, 0, 0],
		   [0, 0.4018775720164609, 0, 0.20093878600823045, 0.008037551440329218, 0.05358367626886146, 2.1433470507544577e-05, 0.0006430041152263373, 0.0, 0.0, 0.0, 0.0, 2.1433470507544577e-05, 0.0, 0.0004501028806584361, 0.0012002743484224962, 0.0027006172839506167, 0.00012860082304526747, 0.00913065843621399, 0.3212662894375856, 0, 0, 0, 0, 0, 0],
		   [0, 0.39071430612711483, 0, 0.23442858367626887, 0.015628572245084592, 0.07814286122542295, 0.0001250285779606767, 0.0018754286694101507, 0.0, 0.0, 0.0, 3.5722450845907626e-06, 0.0, 0.0, 3.5722450845907626e-06, 2.500571559213534e-05, 0.00010002286236854135, 0.0, 0.27895304641060803, 0, 0, 0, 0, 0, 0, 0],
		   [0, 0.3721088629782046, 0, 0.2604762040847432, 0.026047620408474317, 0.10419048163389727, 0.000416761926535589, 0.004167619265355891, 5.953741807651271e-07, 0.0, 0.0, 2.3814967230605084e-05, 0.0, 0.0, 0.0, 0.0, 5.953741807651271e-07, 0.23256744398719698, 0, 0, 0, 0, 0, 0, 0, 0],
		   [0, 0.3488520590420668, 0, 0.2790816472336534, 0.039071430612711476, 0.1302381020423716, 0.0010419048163389727, 0.007814286122542296, 4.465306355738452e-06, 9.922903012752118e-08, 0.0, 8.930612711476906e-05, 0.0, 0.0, 0.0, 0.0, 0.19380669946781479, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		   [0, 0.32301116577969147, 0, 0.29071004920172233, 0.05426587585098817, 0.15504535957425192, 0.0021706350340395266, 0.013023810204237159, 1.860544314891022e-05, 8.269085843960096e-07, 1.6538171687920194e-08, 0.000248072575318803, 0.0, 0.0, 0.0, 0.16150558288984554, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
		   ]
p[0][1] = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		   [0, 0.08333333333333333, 0, 0.25, 0.25, 0.08333333333333333, 0.25, 0.08333333333333333, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		   [0, 0.15277777777777776, 0, 0.006944444444444444, 0.0625, 0.0, 0.13194444444444445, 0.041666666666666664, 0.2013888888888889, 0.08333333333333333, 0.13194444444444445, 0.08333333333333333, 0.0625, 0.041666666666666664, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0],
		   [0, 0.21006944444444442, 0, 0.01909722222222222, 0.0, 0.0005787037037037037, 0.015625, 0.0, 0.052083333333333336, 0.047453703703703706, 0.10937500000000001, 0.015625, 0.13020833333333334, 0.07986111111111112, 0.109375, 0.047453703703703706, 0.052083333333333336, 0.0798611111111111, 0.015625, 0.015625, 0.0, 0.0, 0.0, 0, 0, 0],
		   [0, 0.25675154320987653, 0, 0.03501157407407407, 4.8225308641975306e-05, 0.0021219135802469135, 0.0, 0.0, 0.00390625, 0.005208333333333333, 0.018229166666666668, 0.0, 0.04952739197530865, 0.02141203703703704, 0.08352623456790123, 0.07175925925925926, 0.10054976851851852, 0.04918981481481481, 0.08352623456790123, 0.07175925925925926, 0.04952739197530864, 0.09794560185185185, 0, 0, 0, 0],
		   [0, 0.2941944765946502, 0, 0.053489904835390935, 0.00022103266460905347, 0.004862718621399176, 0.0, 4.0187757201646085e-06, 0.0, 0.0, 0.0009765625, 0.0, 0.005967881944444445, 0.0016276041666666665, 0.020134066358024692, 0.024598926183127572, 0.04370418595679012, 0.008499710648148149, 0.06847993827160494, 0.04667807998971193, 0.4265608924897119, 0, 0, 0, 0, 0],
		   [0, 0.32361392425411517, 0, 0.07354861914866254, 0.0006078398276748969, 0.008914984139231821, 3.34897976680384e-07, 2.2103266460905344e-05, 0.0, 0.0, 0.0, 0.0, 0.000244140625, 0.0, 0.0018717447916666667, 0.0031105324074074073, 0.007613570601851852, 0.00048828124999999995, 0.02020975330075446, 0.5597541714891976, 0, 0, 0, 0, 0, 0],
		   [0, 0.34608711343842874, 0, 0.0943873945741169, 0.0013001018536379738, 0.014301120390017713, 2.1489286836991307e-06, 7.09146465620713e-05, 0.0, 0.0, 0.0, 2.7908164723365333e-08, 0.0, 0.0, 6.103515625e-05, 0.00014241536458333332, 0.0005696614583333334, 0.0, 0.5430780662812216, 0, 0, 0, 0, 0, 0, 0],
		   [0, 0.36256745217359204, 0, 0.11536237114614288, 0.002383520065002952, 0.020974976572025978, 7.879405173563478e-06, 0.0001733469138183965, 2.3256803936137776e-09, 0.0, 0.0, 2.0465987463801243e-07, 0.0, 0.0, 0.0, 0.0, 1.52587890625e-05, 0.4985149879496266, 0, 0, 0, 0, 0, 0, 0, 0],
		   [0, 0.3738976850540168, 0, 0.13596279456509697, 0.003932808107254871, 0.028840592786535717, 2.1668364227299562e-05, 0.0003575280097504427, 1.9186863247313663e-08, 1.938066994678148e-10, 0.0, 8.442219828818011e-07, 0.0, 0.0, 0.0, 0.0, 0.45698605951046517, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		   [0, 0.3808217162587208, 0, 0.15579070210584028, 0.006008456830528275, 0.03776744293474915, 4.9656668020894827e-05, 0.0006554680178758117, 8.793978988352095e-08, 1.776561411788302e-09, 1.6150558288984565e-11, 2.5795671699166146e-06, 0.0, 0.0, 0.0, 0.4189038878845929, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
		   ]
p[1][0] = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		   [0, 0.25, 0, 0.25, 0.25, 0.25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		   [0, 0.375, 0, 0.0625, 0.0625, 0.0, 0.1875, 0.125, 0.0625, 0.0, 0.0, 0.125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0],
		   [0, 0.421875, 0, 0.140625, 0.0, 0.015625, 0.015625, 0.0, 0.09375, 0.109375, 0.09375, 0.046875, 0.015625, 0.046875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0],
		   [0, 0.421875, 0, 0.2109375, 0.00390625, 0.046875, 0.0, 0.0, 0.00390625, 0.015625, 0.0390625, 0.0, 0.07421875, 0.0625, 0.0390625, 0.015625, 0.00390625, 0.0625, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0],
		   [0, 0.3955078125, 0, 0.263671875, 0.0146484375, 0.087890625, 0.0, 0.0009765625, 0.0, 0.0, 0.0009765625, 0.0, 0.0146484375, 0.0048828125, 0.0439453125, 0.0498046875, 0.0439453125, 0.029296875, 0.0146484375, 0.029296875, 0.005859375, 0, 0, 0, 0, 0],
		   [0, 0.35595703125, 0, 0.296630859375, 0.032958984375, 0.1318359375, 0.000244140625, 0.00439453125, 0.0, 0.0, 0.0, 0.0, 0.000244140625, 0.0, 0.005126953125, 0.01220703125, 0.02197265625, 0.00146484375, 0.034423828125, 0.1025390625, 0, 0, 0, 0, 0, 0],
		   [0, 0.31146240234375, 0, 0.31146240234375, 0.05767822265625, 0.17303466796875, 0.00128173828125, 0.01153564453125, 0.0, 0.0, 0.0, 6.103515625e-05, 0.0, 0.0, 6.103515625e-05, 0.00042724609375, 0.001708984375, 0.0, 0.13128662109375, 0, 0, 0, 0, 0, 0, 0],
		   [0, 0.2669677734375, 0, 0.31146240234375, 0.086517333984375, 0.2076416015625, 0.00384521484375, 0.0230712890625, 1.52587890625e-05, 0.0, 0.0, 0.0003662109375, 0.0, 0.0, 0.0, 0.0, 1.52587890625e-05, 0.10009765625, 0, 0, 0, 0, 0, 0, 0, 0],
		   [0, 0.22525405883789062, 0, 0.3003387451171875, 0.11679840087890625, 0.2335968017578125, 0.0086517333984375, 0.03893280029296875, 0.000102996826171875, 3.814697265625e-06, 0.0, 0.0012359619140625, 0.0, 0.0, 0.0, 0.0, 0.07508468627929688, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		   [0, 0.1877117156982422, 0, 0.2815675735473633, 0.1459980010986328, 0.25028228759765625, 0.016222000122070312, 0.058399200439453125, 0.00038623809814453125, 2.86102294921875e-05, 9.5367431640625e-07, 0.00308990478515625, 0.0, 0.0, 0.0, 0.056313514709472656, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
		   ]
p[1][1] = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		   [0, 0.125, 0, 0.375, 0.375, 0.125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		   [0, 0.21875, 0, 0.015625, 0.140625, 0.0, 0.296875, 0.09375, 0.140625, 0.0, 0.0, 0.09375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0],
		   [0, 0.287109375, 0, 0.041015625, 0.0, 0.001953125, 0.052734375, 0.0, 0.17578125, 0.107421875, 0.17578125, 0.052734375, 0.052734375, 0.052734375, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0],
		   [0, 0.3349609375, 0, 0.07177734375, 0.000244140625, 0.0068359375, 0.0, 0.0, 0.019775390625, 0.0263671875, 0.09228515625, 0.0, 0.145263671875, 0.08203125, 0.09228515625, 0.0263671875, 0.019775390625, 0.08203125, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0],
		   [0, 0.366363525390625, 0, 0.10467529296875, 0.001068115234375, 0.01495361328125, 0.0, 3.0517578125e-05, 0.0, 0.0, 0.007415771484375, 0.0, 0.045318603515625, 0.012359619140625, 0.099334716796875, 0.079681396484375, 0.099334716796875, 0.05218505859375, 0.045318603515625, 0.05218505859375, 0.019775390625, 0, 0, 0, 0, 0],
		   [0, 0.38468170166015625, 0, 0.13738632202148438, 0.002803802490234375, 0.0261688232421875, 3.814697265625e-06, 0.00016021728515625, 0.0, 0.0, 0.0, 0.0, 0.002780914306640625, 0.0, 0.021320343017578125, 0.02986907958984375, 0.06076812744140625, 0.00556182861328125, 0.08446121215820312, 0.2440338134765625, 0, 0, 0, 0, 0, 0],
		   [0, 0.39269590377807617, 0, 0.16829824447631836, 0.005724430084228516, 0.04007101058959961, 2.3365020751953125e-05, 0.0004906654357910156, 0.0, 0.0, 0.0, 4.76837158203125e-07, 0.0, 0.0, 0.0010428428649902344, 0.002433300018310547, 0.009733200073242188, 0.0, 0.3794865608215332, 0, 0, 0, 0, 0, 0, 0],
		   [0, 0.39269590377807617, 0, 0.19634795188903809, 0.010017752647399902, 0.05609941482543945, 8.177757263183594e-05, 0.0011448860168457031, 5.960464477539063e-08, 0.0, 0.0, 3.337860107421875e-06, 0.0, 0.0, 0.0, 0.0, 0.0003910660743713379, 0.3432178497314453, 0, 0, 0, 0, 0, 0, 0, 0],
		   [0, 0.38656003028154373, 0, 0.22089144587516785, 0.015777960419654846, 0.07363048195838928, 0.00021466612815856934, 0.002253994345664978, 4.6938657760620117e-07, 7.450580596923828e-09, 0.0, 1.3142824172973633e-05, 0.0, 0.0, 0.0, 0.0, 0.30065780133008957, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		   [0, 0.37582225166261196, 0, 0.24160001892596483, 0.02300952561199665, 0.0920381024479866, 0.0004695821553468704, 0.0039444901049137115, 2.05356627702713e-06, 6.51925802230835e-08, 9.313225746154785e-10, 3.8333237171173096e-05, 0.0, 0.0, 0.0, 0.2630755761638284, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
		   ]

class Situation:
    max_win_rate = 0
    num_rolls = None
    def __str__(self):
        return '({0}%, roll {1})'.format(self.max_win_rate, self.num_roll)

situations = [[[Situation(), Situation()] for j in range(100)]
              for i in range(100)]

def dp(s0, s1, swapped):
    if s0 >= 100:
        return 100
    if s1 >= 100:
        return 0
    if situations[s0][s1][swapped].num_rolls != None:
        return situations[s0][s1][swapped].max_win_rate

    situations[s0][s1][swapped].num_rolls = 4

    def r(d0, d1): # R as in reroll
        if (s0 + d0 + s1 + d1) % 7 == 0:
            return True
        else:
            return False

    def calc_turn_result(d0, d1):
        t0, t1 = s0 + d0, s1
        if t0 == 2 * t1 or t1 == 2 * t0:
            t0, t1 = t1, t0

        if t0 >= 100 or t1 >= 100:
            return (t0, t1)

        t1 = s1 + d1
        if t0 == 2 * t1 or t1 == 2 * t0:
            t0, t1 = t1, t0
        return (t0, t1)

    def eval_situation(win_rate, num_rolls):
        if win_rate > situations[s0][s1][swapped].max_win_rate:
            situations[s0][s1][swapped].max_win_rate = sum_rates
            situations[s0][s1][swapped].num_rolls = num_rolls

    # Pork Chop
    sum_rates = 0
    for k in range(1, 25 + 1):
        if p[not swapped][r(1, 0)][4][k] != 0:
            s0_t, s1_t = calc_turn_result(1, k)
            sum_rates += p[not swapped][r(1, 0)][4][k] * dp(s0_t, s1_t, not swapped)
    eval_situation(sum_rates, -1)

    # Free Bacon
    sum_rates = 0
    for k in range(1, 25 + 1):
        if p[swapped][r( hp(fb(s1)), 0 )][4][k] != 0:
            s0_t, s1_t = calc_turn_result( hp(fb(s1)), k )
            sum_rates += p[swapped][r( hp(fb(s1)), 0 )][4][k] * dp(s0_t, s1_t, swapped)
    eval_situation(sum_rates, 0)

    # Normal Rolls
    for i in range(1, 10 + 1):
        sum_rates = 0
        for j in range(1, 25 + 1):
            for k in range(1, 25 + 1):
                if p[swapped][r(0, 0)][i][j] != 0 and p[swapped][r(j, 0)][4][k] != 0:
                    s0_t, s1_t = calc_turn_result(j, k)
                    sum_rates += p[swapped][r(0, 0)][i][j] * p[swapped][r(j, 0)][4][k] * dp(s0_t, s1_t, swapped)
        eval_situation(sum_rates, i)

    if situations[s0][s1][swapped].max_win_rate > 100.0:
        situations[s0][s1][swapped].max_win_rate = 100.0
    return situations[s0][s1][swapped].max_win_rate


for i in range(0, 100):
    for j in range(0, 100):
        dp(i, j, True)
        dp(i, j, False)


print('decisions = [', end='')
for i in range(100):
    if i != 0:
        print('\t\t\t ', end='')
    print('[', end='')
    for j in range(100):
        print('[', end='')
        print(situations[i][j][0].num_rolls, end=', ')
        print(situations[i][j][1].num_rolls, end=']')
        if j != 99:
            print(', ', end='')
    print(']', end='')
    if i != 99:
        print(',', end='')
    print()
print(']', end='')

print()
print()
print()

print('[', end='')
for i in range(100):
    if i != 0:
        print('\t\t\t ', end='')
    print('[', end='')
    for j in range(100):
        print('[', end='')
        print(situations[i][j][0].max_win_rate, end=', ')
        print(situations[i][j][1].max_win_rate, end=']')
        if j != 99:
            print(',\t', end='')
    print(']', end='')
    if i != 99:
        print(',', end='')
    print()
print(']', end='')
